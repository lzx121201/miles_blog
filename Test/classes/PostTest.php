<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-04-30 at 16:17:50.
 */
require_once '../classes/Post.php';

class PostTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Post
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Post(1, 2, "test", "test", "test.jpg", 1, 0, "2017-04-30 14:20:59", "test,", 0, "");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->object);
    }

    /**
     * testGetUserID
     * 
     * Test the GetUserID method
     * @todo   Implement testGetUserID().
     */
    public function testGetUserID() {
        $this->assertEquals(2, $this->object->getUserID()
        );
    }

    /**
     * @covers Post::getPostID
     * @todo   Implement testGetPostID().
     */
    public function testGetPostID() {
        $this->assertEquals(1, $this->object->getPostID()
        );
    }

    /**
     * @covers Post::getTitle
     * @todo   Implement testGetTitle().
     */
    public function testGetTitle() {
        $this->assertEquals("test", $this->object->getTitle()
        );
    }

    /**
     * @covers Post::getContent
     * @todo   Implement testGetContent().
     */
    public function testGetContent() {
        $this->assertEquals("test", $this->object->getContent()
        );
    }

    /**
     * @covers Post::getTime
     * @todo   Implement testGetTime().
     */
    public function testGetTime() {
        $this->assertEquals("2017-04-30 14:20:59", $this->object->getTime()
        );
    }

    /**
     * @covers Post::getPicName
     * @todo   Implement testGetPicName().
     */
    public function testGetPicName() {
        $this->assertEquals("test.jpg", $this->object->getPicName()
        );
    }

    /**
     * @covers Post::getNo_like
     * @todo   Implement testGetNo_like().
     */
    public function testGetNo_like() {
        $this->assertEquals(1, $this->object->getNo_like()
        );
    }

    /**
     * @covers Post::getNo_dislike
     * @todo   Implement testGetNo_dislike().
     */
    public function testGetNo_dislike() {
        $this->assertEquals(0, $this->object->getNo_dislike()
        );
    }

    /**
     * @covers Post::getHashtag
     * @todo   Implement testGetHashtag().
     */
    public function testGetHashtag() {
        $this->assertEquals("test,", $this->object->getHashtag()
        );
    }

    /**
     * @covers Post::setUserID
     * @todo   Implement testSetUserID().
     */
    public function testSetUserID() {
        $this->object->setUserID(1);
        $this->assertEquals(1, $this->object->getUserID()
        );
    }

    /**
     * @covers Post::setPostID
     * @todo   Implement testSetPostID().
     */
    public function testSetPostID() {
        $this->object->setUserID(1);
        $this->assertEquals(1, $this->object->getPostID()
        );
    }

    /**
     * @covers Post::setTitle
     * @todo   Implement testSetTitle().
     */
    public function testSetTitle() {
        $this->object->setTitle("test1");
        $this->assertEquals("test1", $this->object->getTitle()
        );
    }

    /**
     * @covers Post::setContent
     * @todo   Implement testSetContent().
     */
    public function testSetContent() {
        $this->object->setContent("test");
        $this->assertEquals("test", $this->object->getContent()
        );
    }

    /**
     * @covers Post::setTime
     * @todo   Implement testSetTime().
     */
    public function testSetTime() {
        $this->object->setTime("2017-04-30 14:20:59");
        $this->assertEquals("2017-04-30 14:20:59", $this->object->getTime()
        );
    }

    /**
     * @covers Post::setPicName
     * @todo   Implement testSetPicName().
     */
    public function testSetPicName() {
        $this->object->setPicName("test.jpg");
        $this->assertEquals("test.jpg", $this->object->getPicName()
        );
    }

    /**
     * @covers Post::setNo_like
     * @todo   Implement testSetNo_like().
     */
    public function testSetNo_like() {
        $this->object->setNo_like(1);
        $this->assertEquals(1, $this->object->getNo_like()
        );
    }

    /**
     * @covers Post::setNo_dislike
     * @todo   Implement testSetNo_dislike().
     */
    public function testSetNo_dislike() {
        $this->object->setNo_dislike(0);
        $this->assertEquals(0, $this->object->getNo_dislike()
        );
    }

    /**
     * @covers Post::setHashtag
     * @todo   Implement testSetHashtag().
     */
    public function testSetHashtag() {
        $this->object->setHashtag("test,");
        $this->assertEquals("test,", $this->object->getHashtag()
        );
    }

    /**
     * @covers Post::getAllowComment
     * @todo   Implement testGetAllowComment().
     */
    public function testGetAllowComment() {
        $this->assertEquals(0, $this->object->getAllowComment()
        );
    }

    /**
     * @covers Post::setAllowComment
     * @todo   Implement testSetAllowComment().
     */
    public function testSetAllowComment() {
        $this->object->setAllowComment(0);
        $this->assertEquals(0, $this->object->getAllowComment()
        );
    }

    /**
     * @covers Post::getFilter_keyword
     * @todo   Implement testGetFilter_keyword().
     */
    public function testGetFilter_keyword() {
        $this->assertEquals("", $this->object->getFilter_keyword()
        );
    }

    /**
     * @covers Post::setFilter_keyword
     * @todo   Implement testSetFilter_keyword().
     */
    public function testSetFilter_keyword() {
        $this->object->setFilter_keyword("");
        $this->assertEquals("", $this->object->getFilter_keyword()
        );
    }

    /**
     * @covers Post::displayAtHome
     * @todo   Implement testDisplayAtHome().
     */
//    public function testDisplayAtHome()
//    {
//        $this->expectedOutputString('<div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 gallery" style="padding: 0;">
//                <a href="postDetail.php?post_id=' . $this->object->getPostID() . '"><img class="img-responsive img" src="img/' . $this->object->getPicName() . '" alt=""/></a>
//                <div class="col-md-12 text">
//                    <h3 class="title">' . $this->object->getTitle() . '</h3>
//                    <span>by <strong>' . $result['name'] . '</strong></span>
//                    <p>' . substr($this->object->getContent(), 0, MAX_LENGTH_OF_C_P) . ' ...... </p>
//                    <h5 class="date pull-right">' . Utility::formatDate($this->time, "j M Y") . '</h5>
//                </div>
//            </div>');
//        $this->object->displayAtHome()
//        ;
//    }

    /**
     * @covers Post::displayTileInList
     * @todo   Implement testDisplayTileInList().
     */
    public function testDisplayTileInList() {

        $this->assertEquals('<li><a href="postDetail.php?post_id=' . $this->object->getPostID() . '">' . $this->object->getTitle() . '</a></li>', $this->object->displayTileInList()
        );
    }

    /**
     * @covers Post::displayAtAllPost
     * @todo   Implement testDisplayAtAllPost().
     */
    public function testDisplayAtAllPost() {
        $this->assertEquals('<div class="col-md-4 portfolio-item">
                        <a href="postDetail.php?post_id=' . $this->object->getPostID() . '">
                            <img class="img-responsive posts" src="img/' . $this->object->getPicName() . '" alt="">
                        </a>
                        <span class="fa fa-thumbs-up fa-lg like">&nbsp;&nbsp; ' . $this->object->getNo_like() . '</span>
                        <h3>
                            <a href="#" style="color: #000">' . $this->object->getTitle() . '</a>
                        </h3>
                        <p>' . substr($this->object->getContent(), 0, MAX_LENGTH_OF_C_P) . ' ......</p>
                    </div>', $this->object->displayAtAllPost()
        );
    }

    /**
     * @covers Post::displayAtDetail
     * @todo   Implement testDisplayAtDetail().
     */
//    public function testDisplayAtDetail()
//    {
//        $this->expectedOutputString('<h1>' . $this->object->getTitle() . '</h1>
//            <p class="lead">by <a href="profile.php">' . $result['name'] . '</a></p>
//            <hr>
//            <p><span class="glyphicon glyphicon-time"></span> Posted on ' . Utility::formatDate($this->object->getTime(), "F d, Y") . ' at ' . Utility::formatDate($this->object->getTime(), "g:i:s A") . '<form><input type="hidden"  value="'.$this->object->getPostID().'" name="PID" id="PID" class="pull-right">'
//                . '<input type="hidden" name="UID" id="UID" value="'.$UID.'" class="pull-right"><input type="hidden" name="No_like" id="No_like" value="'.$this->object->getNo_like().'" class="pull-right"><input type="hidden" name="loggedIn" id="loggedIn" value="'.$L.'" class="pull-right"><button class="pull-right like-btn" type="button" id="like_button"><i class="fa fa-thumbs-up">&nbsp;&nbsp;' . $this->object->getNo_like() . '</i></button></form></p>
//            <hr>
//            <img class="img-responsive" src="img/' . $this->object->getPicName() . '" alt="">
//            <hr>
//            <p>' . $this->object->getContent() . '</p>
//            <p class="lead">');
//        
//        $this->object->displayAtAllDetail();
//    }

    /**
     * @covers Post::displayPostComments
     * @todo   Implement testDisplayPostComments().
     */
    public function testDisplayPostComments() {
        $this->assertEquals('<center><p>No Comments are allowed on this post :)</p></center>', $this->object->displayPostComments()
        );
    }

}
